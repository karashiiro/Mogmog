syntax = "proto3";

option csharp_namespace = "Mogmog.Protos";

package chat;

service ChatService {
    rpc GetChatServerInfo (ReqChatServerInfo) returns (ChatServerInfo);

    rpc SendOAuth2Code (ReqOAuth2Code) returns (GeneralAck);

    rpc Chat (stream ChatMessage) returns (stream ChatMessage);
}

/*
 * The Message object includes both the world name and the world ID to make client-side operations a mogtouch
 * easier to deal with. The client can provide an ID, and the server will return a world name.
 */
message ChatMessage {
    uint64 Id = 1;
    string Content = 2;
    string Author = 3; // The name of the author.
    uint64 AuthorId = 4; // The message author's ID.
    uint64 AuthorId2 = 5; // For things like the relay bot ID.
    string Avatar = 6;
    string World = 7; // This can be sent out as an empty string, see above.
    int32 WorldId = 8;
    int32 AdditionalFlags = 9; // An additional 32 booleans reserved for future use.
}

/*
 * Used to communicate authentication requirements and the like to clients.
 * Bit 0 - OAuth2 requirement
 */
message ChatServerInfo {
    int32 Flags = 1;
    string ServerId = 2;
}

message ReqChatServerInfo {
    bool Dummy = 1;
}

 message ReqOAuth2Code {
     string OAuth2Code = 1;
 }

 message GeneralAck {
     bool Status = 1;
 }